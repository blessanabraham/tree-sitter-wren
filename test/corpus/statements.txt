SPDX-FileCopyrightText: 2023 Jummit <jummit@web.de>

SPDX-License-Identifier: LGPL-3.0-or-later

======
Return
======

return 1

---

(source_file
  (return_statement (number)))

======
Assign
======

color = "red"

---

(source_file
	(assignment
		(identifier)
		(string)))

======
Blocks
======

{
  func()
  func()
  func()
}

---

(source_file
	(block
		(call_expression
			(identifier))
		(call_expression
			(identifier))
		(call_expression
			(identifier))))

====================
Variable definitions
====================

var a = 1

---

(source_file
	(variable_definition
		(identifier)
		(number)))

=============
Class methods
=============

class Button {
	constructor new(a, b) {}
	static about() {}
	draw(a) {}
}

---

(source_file
	(class_definition
		(identifier)
		(class_body
			(constructor
				(method_definition
					(identifier)
					(parameter_list
						(parameter)
						(parameter))
					(block)))
			(static_method_definition
				(method_definition
					(identifier)
					(block)))
			(method_definition
				(identifier)
				(parameter_list
					(parameter))
				(block)))))

======
Getter
======

class Button {
	disabled { false }
}

---

(source_file
	(class_definition
		(identifier)
		(class_body
			(getter_definition
				(identifier)
				(block
					(boolean))))))

======
Setter
======

class Button {
	color=(value) {}
}

---

(source_file
	(class_definition
		(identifier)
		(class_body
			(setter_definition
				(identifier)
				(parameter)
				(block)))))

===============
Prefix operator
===============

class Button {
	- {}
}

---

(source_file
	(class_definition
		(identifier)
		(class_body
			(prefix_operator_definition
				(operator)
				(block)))))

==============
Infix operator
==============

class Button {
	-(other) {}
}

---

(source_file
	(class_definition
		(identifier)
		(class_body
			(infix_operator_definition
				(operator)
				(parameter)
				(block)))))

===================
Subscript operators
===================

class Button {
	[index] {}
	[x, y] {}
	[index]=(value) {}
}

---

(source_file
	(class_definition
		(identifier)
		(class_body
			(subscript_operator_definition
				(parameter_list
					(parameter))
				(block))
			(subscript_operator_definition
				(parameter_list
					(parameter)
					(parameter))
				(block))
			(subscript_setter_definition
				(parameter_list
					(parameter))
				(parameter)
				(block)))))

===========
Inheritance
===========

class Pegasus is Unicorn {}

---

(source_file
	(class_definition
		(identifier)
		(identifier)
		(class_body)))

==========
Attributes
==========

#key
#hidden = true
#group(with, multiple = true, keys = "value")
#!runtimeAccess = true

class Example {
  #test
  doStuff() {}
}
---

(source_file
	(attribute
		(identifier))
	(attribute
		(identifier)
		(boolean))
	(attribute
		(identifier)
		(group_members
			(identifier)
			(key_value_pair
				(identifier)
				(boolean))
			(key_value_pair
				(identifier)
				(string))))
	(runtime_attribute
		(identifier)
		(boolean))
	(class_definition
		(identifier)
		(identifier)
		(block
			(attribute
				(identifier))
			(member_definition
				(identifier)
				(parameter_list)
				(block)))))))

=======
Imports
=======

import "abc"
import "beverages" for Coffee, Water as H2O

---

(source_file
	(import_statement
		(string))
	(import_statement
		(string)
		(identifier)
		(rename
			(identifier)
			(identifier))))

=============
If statements
=============

if (ready) return 1 else return 5

---

(source_file
	(if_statement
		(identifier)
		(return_statement
			(number))
		(else_branch
			(return_statement
				(number)))))

==============
For statements
==============

for (beatle in ["paul", "ringo"]) {
  print(beatle)
}

---

(source_file
	(for_statement
		(identifier)
		(list
			(string)
			(string))
		(block
			(call_expression
				(identifier)
				(parameter_list
					(identifier))))))

================
While statements
================

while (n != 1) {
	break
}

---

(source_file
	(while_statement
		(binary_expression
			(identifier)
			(operator)
			(number))
		(block
			(break_statement))))

================
Control keywords
================

continue
break

---

(source_file
	(continue_statement)
	(break_statement))

